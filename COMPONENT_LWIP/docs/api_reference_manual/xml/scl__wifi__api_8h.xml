<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="scl__wifi__api_8h" kind="file" language="C++">
    <compoundname>scl_wifi_api.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes refid="scl__common_8h" local="yes">scl_common.h</includes>
    <includes refid="scl__types_8h" local="yes">scl_types.h</includes>
    <includedby refid="scl__ipc_8h" local="yes">scl_ipc.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="1">
        <label>scl_wifi_api.h</label>
        <link refid="scl__wifi__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>scl_types.h</label>
        <link refid="scl__types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cy_result.h</label>
      </node>
      <node id="3">
        <label>scl_common.h</label>
        <link refid="scl__common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>scl_wifi_api.h</label>
        <link refid="scl__wifi__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>scl_ipc.h</label>
        <link refid="scl__ipc_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structscl__tx__buf__t" prot="public">scl_tx_buf_t</innerclass>
    <innerclass refid="structscl__event__msg" prot="public">scl_event_msg</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__wifi_1gaf28de372f19220528a8020d489283291" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* scl_scan_result_callback_t) (scl_scan_result_t *result_ptr, void *user_data, scl_scan_status_t status)</definition>
        <argsstring>)(scl_scan_result_t *result_ptr, void *user_data, scl_scan_status_t status)</argsstring>
        <name>scl_scan_result_callback_t</name>
        <briefdescription>
<para>Scan result callback function pointer type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pointer that indicates where to put the next scan result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User provided data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of scan process </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="175" column="9" bodyfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__wifi_1ga69d33b94e3ad497f7b8c1031bbe427c4" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void*(* scl_event_handler_t) (const scl_event_header_t *event_header, const uint8_t *event_data, void *handler_user_data)</definition>
        <argsstring>)(const scl_event_header_t *event_header, const uint8_t *event_data, void *handler_user_data)</argsstring>
        <name>scl_event_handler_t</name>
        <briefdescription>
<para>Event handler prototype definition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">scl_event_header_t</parametername>
</parameternamelist>
<parameterdescription>
<para>: scl event header </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">uint8_t*</parametername>
</parameternamelist>
<parameterdescription>
<para>: event data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">handler_user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>: semaphore data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="263" column="9" bodyfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wifi_1gabb29fb3b65d9a0bffe66afea8d3244da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool scl_wifi_on</definition>
        <argsstring>(void)</argsstring>
        <name>scl_wifi_on</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Turn on the Wi-Fi device. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This API should be called before using any SCL Wi-Fi API.</para>
</simplesect>
<simplesect kind="return"><para>True if initialization is successful, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="81" column="13" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="81" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga5f30d059fce225b6a1bb1d6b63747fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_wifi_set_up</definition>
        <argsstring>(void)</argsstring>
        <name>scl_wifi_set_up</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Brings up the Wi-Fi core. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SCL_SUCCESS or Error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="87" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="87" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1gaeab95b84a48631c4ad535d664c990a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_wifi_get_mac_address</definition>
        <argsstring>(scl_mac_t *mac)</argsstring>
        <name>scl_wifi_get_mac_address</name>
        <param>
          <type><ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Retrieves the current Media Access Control (MAC) address (or Ethernet hardware address) of the 802.11 device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable to which the current MAC address will be written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL_SUCCESS or Error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="96" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="96" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1gaa10fb0d690e07935fcb5c2ec35c2029b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_wifi_get_bssid</definition>
        <argsstring>(scl_mac_t *bssid)</argsstring>
        <name>scl_wifi_get_bssid</name>
        <param>
          <type><ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref> *</type>
          <declname>bssid</declname>
        </param>
        <briefdescription>
<para>Gets the BSSID of the interface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This API should be used after the device is connected to a network.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bssid</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the BSSID address (mac address), if associated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL_SUCCESS or Error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="106" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="106" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga22cc8cb41c67b3a3cc1fbcdabb3b6b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_wifi_register_multicast_address</definition>
        <argsstring>(scl_mac_t *mac)</argsstring>
        <name>scl_wifi_register_multicast_address</name>
        <param>
          <type><ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref> *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Registers interest in a multicast address. </para>
        </briefdescription>
        <detaileddescription>
<para>Once a multicast address has been registered, all packets detected on the medium destined for that address are forwarded to the host. Otherwise, the packets are ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Ethernet MAC address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL_SUCCESS If the address was registered successfully or Error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="118" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="118" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga7ee9f25797137c03c2f1ad08481b11cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_wifi_is_ready_to_transceive</definition>
        <argsstring>(void)</argsstring>
        <name>scl_wifi_is_ready_to_transceive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determines if an interface is ready to transmit/receive ethernet packets. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function must be called after the connection is established; otherwise, it returns Error code.</para>
</simplesect>
<simplesect kind="return"><para>SCL_SUCCESS If the interface is ready to transmit/receive ethernet packets. SCL_NOTFOUND If no AP with a matching SSID was found. SCL_NOT_AUTHENTICATED If matching AP was found, but it does not let you authenticate. </para>
</simplesect>
<simplesect kind="note"><para>This can occur if the device is in the blocklist of the AP. SCL_NOT_KEYED If the device has authenticated and associated but has not completed the key exchange. </para>
</simplesect>
<simplesect kind="note"><para>This can occur if the passphrase is incorrect. Error code If the interface is not ready to transmit/receive ethernet packets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="132" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="132" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga056399731dbe8a81c76186a0ee9626d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_network_send_ethernet_data</definition>
        <argsstring>(scl_tx_buf_t buffer)</argsstring>
        <name>scl_network_send_ethernet_data</name>
        <param>
          <type><ref refid="structscl__tx__buf__t" kindref="compound">scl_tx_buf_t</ref></type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Sends an ethernet frame to SCL (called by the Network Stack) </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes ethernet data from the network stack and transmits over the wireless network. This function returns immediately after the packet has been queued for transmission, NOT after it has been transmitted. Packet buffers passed to the SCL are released inside the SCL once they have been transmitted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the packet buffer to be sent.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL_SUCCESS or Error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="145" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="145" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1gaadf11fa39efd4aeb7d4b9efc396f6c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_wifi_get_rssi</definition>
        <argsstring>(int32_t *rssi)</argsstring>
        <name>scl_wifi_get_rssi</name>
        <param>
          <type>int32_t *</type>
          <declname>rssi</declname>
        </param>
        <briefdescription>
<para>Retrieves the latest RSSI value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This API must be called after the device is connected to a network.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rssi</parametername>
</parameternamelist>
<parameterdescription>
<para>Location where the RSSI value will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL_SUCCESS If the RSSI was successfully retrieved or Error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="155" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="155" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga6ffc9c85fcef342276617b83afa610a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scl_network_process_ethernet_data</definition>
        <argsstring>(scl_buffer_t buffer)</argsstring>
        <name>scl_network_process_ethernet_data</name>
        <param>
          <type><ref refid="scl__common_8h_1ade53c1ba949b59704f58c0c2d11d5421" kindref="member">scl_buffer_t</ref></type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Retrieves the RX data packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to RX buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="161" column="13" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="161" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga84ab01d9a18dca2e31b27c125bcb8a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scl_emac_wifi_link_state_changed</definition>
        <argsstring>(bool state_up)</argsstring>
        <name>scl_emac_wifi_link_state_changed</name>
        <param>
          <type>bool</type>
          <declname>state_up</declname>
        </param>
        <briefdescription>
<para>Notifies network stack about the change in network connection state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state_up</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="167" column="13" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="167" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1gaed2249e7300ad43ef519857cd04e4714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t scl_wifi_scan</definition>
        <argsstring>(scl_scan_type_t scan_type, scl_bss_type_t bss_type, const scl_ssid_t *optional_ssid, const scl_mac_t *optional_mac, const uint16_t *optional_channel_list, const scl_scan_extended_params_t *optional_extended_params, scl_scan_result_callback_t callback, scl_scan_result_t *result_ptr, void *user_data)</argsstring>
        <name>scl_wifi_scan</name>
        <param>
          <type><ref refid="scl__types_8h_1a6ac4a99c8190f2f61e63b7fc5349f47e" kindref="member">scl_scan_type_t</ref></type>
          <declname>scan_type</declname>
        </param>
        <param>
          <type><ref refid="scl__types_8h_1a2f3bd2bff982264490a05a98fe12a92f" kindref="member">scl_bss_type_t</ref></type>
          <declname>bss_type</declname>
        </param>
        <param>
          <type>const <ref refid="structscl__ssid__t" kindref="compound">scl_ssid_t</ref> *</type>
          <declname>optional_ssid</declname>
        </param>
        <param>
          <type>const <ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref> *</type>
          <declname>optional_mac</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>optional_channel_list</declname>
        </param>
        <param>
          <type>const <ref refid="structscl__scan__extended__params__t" kindref="compound">scl_scan_extended_params_t</ref> *</type>
          <declname>optional_extended_params</declname>
        </param>
        <param>
          <type><ref refid="group__wifi_1gaf28de372f19220528a8020d489283291" kindref="member">scl_scan_result_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="structscl__scan__result__t" kindref="compound">scl_scan_result_t</ref> *</type>
          <declname>result_ptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Initiates a scan to search for 802.11 networks. </para>
        </briefdescription>
        <detaileddescription>
<para>The scan progressively accumulates results over time, and may take between 1 and 10 seconds to complete. The results of the scan will be individually provided to the callback function. Note: The callback function will be executed in the context of the SCL thread and so must not perform any actions that may cause a bus transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scan_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the scan should be Active, Passive or scan Prohibited channels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bss_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the scan should search for Infrastructure networks (those using an Access Point), Ad-hoc networks, or both types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks using the specified SSID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_mac</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks where the BSSID (MAC address of the Access Point) matches the specified MAC address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_channel_list</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will only search for networks on the specified channels - array of channel numbers to search, terminated with a zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optional_extended_params</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is non-Null, then the scan will obey the specifications about dwell times and number of probes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function which will receive and process the result data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer to a result storage structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user specific data that will be passed directly to the callback function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>- When scanning specific channels, devices with a strong signal strength on nearby channels may be detected<itemizedlist>
<listitem><para>Callback must not use blocking functions, nor use SCL functions, since it is called from the context of the SCL thread.</para>
</listitem><listitem><para>The callback, result_ptr and user_data variables will be referenced after the function returns. Those variables must remain valid until the scan is complete.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>SCL_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="206" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="206" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga183e79a6f7aa22ddec7a6c67779eae7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t scl_wifi_get_bss_info</definition>
        <argsstring>(scl_wl_bss_info_t *bi)</argsstring>
        <name>scl_wifi_get_bss_info</name>
        <param>
          <type><ref refid="structscl__wl__bss__info__t" kindref="compound">scl_wl_bss_info_t</ref> *</type>
          <declname>bi</declname>
        </param>
        <briefdescription>
<para>Retrives the bss info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bi</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the structure <ref refid="structscl__wl__bss__info__t" kindref="compound">scl_wl_bss_info_t</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="222" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="222" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga5e706bc10132feef93ac2e92e0b7c4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t scl_wifi_set_ioctl_value</definition>
        <argsstring>(uint32_t ioctl, uint32_t value)</argsstring>
        <name>scl_wifi_set_ioctl_value</name>
        <param>
          <type>uint32_t</type>
          <declname>ioctl</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sends an IOCTL command - CDC_SET IOCTL value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioctl</parametername>
</parameternamelist>
<parameterdescription>
<para>CDC_SET - To set the I/O control </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Data value to be sent</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL_SUCCESS or Error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="231" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="231" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1gad64fdf89c3d603a8709548cf19da1246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t scl_wifi_join</definition>
        <argsstring>(const scl_ssid_t *ssid, scl_security_t auth_type, const uint8_t *security_key, uint8_t key_length)</argsstring>
        <name>scl_wifi_join</name>
        <param>
          <type>const <ref refid="structscl__ssid__t" kindref="compound">scl_ssid_t</ref> *</type>
          <declname>ssid</declname>
        </param>
        <param>
          <type><ref refid="scl__types_8h_1af9ee3597a0970d1df20492b765892a67" kindref="member">scl_security_t</ref></type>
          <declname>auth_type</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>security_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>key_length</declname>
        </param>
        <briefdescription>
<para>Joins a Wi-Fi network. </para>
        </briefdescription>
        <detaileddescription>
<para>Scans for, associates and authenticates with a Wi-Fi network. On successful return, the system is ready to send data packets. If a network stack is being used, bring up of the network interface should be done after successful return from this function <simplesect kind="note"><para>wait until NP connects to the network after calling this API </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssid</parametername>
</parameternamelist>
<parameterdescription>
<para>A null terminated string containing the SSID name of the network to join </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auth_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Authentication type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>security_key</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte array containing either the cleartext security key for WPA/WPA2/WPA3 secured networks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the security_key in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL_SUCCESS If NP received the credentials successfully, Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="247" column="17" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="247" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga5843957613d407a2da20cdaa050027a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_wifi_leave</definition>
        <argsstring>(void)</argsstring>
        <name>scl_wifi_leave</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Leaves a Wi-Fi network. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SCL_SUCCESS when the system is joined and ready to send data packets Error code if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="254" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="254" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga6e5f0a25829409bb98ec78b1ecffbb85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref></type>
        <definition>scl_result_t scl_management_set_event_handler</definition>
        <argsstring>(const scl_event_num_t *event_nums, scl_event_handler_t handler_func, void *handler_user_data, uint16_t *event_index)</argsstring>
        <name>scl_management_set_event_handler</name>
        <param>
          <type>const <ref refid="scl__types_8h_1aef70e7ecee07897e718f9471559e6504" kindref="member">scl_event_num_t</ref> *</type>
          <declname>event_nums</declname>
        </param>
        <param>
          <type><ref refid="group__wifi_1ga69d33b94e3ad497f7b8c1031bbe427c4" kindref="member">scl_event_handler_t</ref></type>
          <declname>handler_func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handler_user_data</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>event_index</declname>
        </param>
        <briefdescription>
<para>Registers a handler to receive event callbacks. </para>
        </briefdescription>
        <detaileddescription>
<para>Subscribe locally and notify Wi-Fi about subscription.</para>
<para>This function registers a callback handler to be notified when a particular event is received.</para>
<para><simplesect kind="note"><para>: Currently there is a limit to the number of simultaneously registered events</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_nums</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of event types that is to trigger the handler. The array must be terminated with a SCL_WLC_E_NONE event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler_func</parametername>
</parameternamelist>
<parameterdescription>
<para>A function pointer to the new handler callback </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler_user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer value which will be passed to the event handler function at the time an event is triggered (NULL is allowed) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*event_index</parametername>
</parameternamelist>
<parameterdescription>
<para>entry where the event handler is registered in the list</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL result code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="285" column="21" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="285" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__wifi_1ga7b97db0a51d8c5d715d210e017a3cb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scl_wifi_scan_callback</definition>
        <argsstring>(scl_scan_status_t status)</argsstring>
        <name>scl_wifi_scan_callback</name>
        <param>
          <type><ref refid="scl__types_8h_1a3936863aacd5c7f6573aa494ef322a1b" kindref="member">scl_scan_status_t</ref></type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Invokes the registered scan callback when there is scan result available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>: This function is not meant to be used by application</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>status of the scan </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" line="295" column="13" declfile="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h" declline="295" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Prototypes of functions for controlling the Wi-Fi system</para>
<para>This file provides prototypes for end-user functions, which allow actions such as scanning for Wi-Fi networks, joining Wi-Fi networks, getting the MAC address, and so on. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2018-2020<sp/>Cypress<sp/>Semiconductor<sp/>Corporation</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scl__common_8h" kindref="compound">scl_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scl__types_8h" kindref="compound">scl_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDED_SCL_WIFI_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_SCL_WIFI_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structscl__tx__buf__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">scl_tx_buf<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scl__common_8h_1ade53c1ba949b59704f58c0c2d11d5421" kindref="member">scl_buffer_t</ref><sp/>buffer;<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/><ref refid="structscl__tx__buf__t" kindref="compound">scl_tx_buf_t</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structscl__event__msg" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structscl__event__msg" kindref="compound">scl_event_msg</ref></highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structscl__event__msg_1ab6d7b6f8c2ceaba7acda80aaf05f4899" kindref="member">version</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structscl__event__msg_1a1e87af3c18a2fd36c61faf89949bdc3f" kindref="member">flags</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structscl__event__msg_1a45def65890de0da17bc0d6e2ca2b3a9f" kindref="member">event_type</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structscl__event__msg_1ade20423e91627f07e610924cb0081623" kindref="member">status</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structscl__event__msg_1a5ac0b16c31813f87b98e97cc5bacd64a" kindref="member">reason</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structscl__event__msg_1a6d9c484262d9d2e9fceaa54a2e58b3c0" kindref="member">auth_type</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structscl__event__msg_1a20ef2f8b0dc25d28c0c76be72919a60a" kindref="member">datalen</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref><sp/><ref refid="structscl__event__msg_1ab30135ca78cd2f4bff7f74f0f2de3df3" kindref="member">addr</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structscl__event__msg_1a5a2af35dfcb0e4acf0fd97f21db8e7fe" kindref="member">ifname</ref>[16];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structscl__event__msg_1aee54e454588cb953b7f349e589c2d09f" kindref="member">ifidx</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structscl__event__msg_1aa2c53e1708eb89382779539506cb4359" kindref="member">bsscfgidx</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structscl__event__msg" kindref="compound">scl_event_msg</ref><sp/>scl_event_header_t;</highlight></codeline>
<codeline lineno="67"><highlight class="comment">/******************************************************</highlight></codeline>
<codeline lineno="68"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>Declarations</highlight></codeline>
<codeline lineno="69"><highlight class="comment">******************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__wifi_1gabb29fb3b65d9a0bffe66afea8d3244da" kindref="member">scl_wifi_on</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1ga5f30d059fce225b6a1bb1d6b63747fa5" kindref="member">scl_wifi_set_up</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1gaeab95b84a48631c4ad535d664c990a43" kindref="member">scl_wifi_get_mac_address</ref>(<ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref><sp/>*mac);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1gaa10fb0d690e07935fcb5c2ec35c2029b" kindref="member">scl_wifi_get_bssid</ref>(<ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref><sp/>*bssid);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1ga22cc8cb41c67b3a3cc1fbcdabb3b6b3f" kindref="member">scl_wifi_register_multicast_address</ref>(<ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref><sp/>*mac);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1ga7ee9f25797137c03c2f1ad08481b11cf" kindref="member">scl_wifi_is_ready_to_transceive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1ga056399731dbe8a81c76186a0ee9626d6" kindref="member">scl_network_send_ethernet_data</ref>(<ref refid="structscl__tx__buf__t" kindref="compound">scl_tx_buf_t</ref><sp/>buffer);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1gaadf11fa39efd4aeb7d4b9efc396f6c24" kindref="member">scl_wifi_get_rssi</ref>(int32_t<sp/>*rssi);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wifi_1ga6ffc9c85fcef342276617b83afa610a7" kindref="member">scl_network_process_ethernet_data</ref>(<ref refid="scl__common_8h_1ade53c1ba949b59704f58c0c2d11d5421" kindref="member">scl_buffer_t</ref><sp/>buffer);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wifi_1ga84ab01d9a18dca2e31b27c125bcb8a7f" kindref="member">scl_emac_wifi_link_state_changed</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state_up);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__wifi_1gaf28de372f19220528a8020d489283291" kindref="member">scl_scan_result_callback_t</ref>)(<ref refid="structscl__scan__result__t" kindref="compound">scl_scan_result_t</ref><sp/>*result_ptr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data,<sp/><ref refid="scl__types_8h_1a3936863aacd5c7f6573aa494ef322a1b" kindref="member">scl_scan_status_t</ref><sp/><ref refid="structscl__event__msg_1ade20423e91627f07e610924cb0081623" kindref="member">status</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifi_1gaed2249e7300ad43ef519857cd04e4714" kindref="member">scl_wifi_scan</ref>(<ref refid="scl__types_8h_1a6ac4a99c8190f2f61e63b7fc5349f47e" kindref="member">scl_scan_type_t</ref><sp/>scan_type,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="scl__types_8h_1a2f3bd2bff982264490a05a98fe12a92f" kindref="member">scl_bss_type_t</ref><sp/>bss_type,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structscl__ssid__t" kindref="compound">scl_ssid_t</ref><sp/>*optional_ssid,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structscl__mac__t" kindref="compound">scl_mac_t</ref><sp/>*optional_mac,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*optional_channel_list,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structscl__scan__extended__params__t" kindref="compound">scl_scan_extended_params_t</ref><sp/>*optional_extended_params,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__wifi_1gaf28de372f19220528a8020d489283291" kindref="member">scl_scan_result_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structscl__scan__result__t" kindref="compound">scl_scan_result_t</ref><sp/>*result_ptr,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifi_1ga183e79a6f7aa22ddec7a6c67779eae7d" kindref="member">scl_wifi_get_bss_info</ref>(<ref refid="structscl__wl__bss__info__t" kindref="compound">scl_wl_bss_info_t</ref><sp/>*bi);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifi_1ga5e706bc10132feef93ac2e92e0b7c4f2" kindref="member">scl_wifi_set_ioctl_value</ref>(uint32_t<sp/>ioctl,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__wifi_1gad64fdf89c3d603a8709548cf19da1246" kindref="member">scl_wifi_join</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structscl__ssid__t" kindref="compound">scl_ssid_t</ref><sp/>*ssid,<sp/><ref refid="scl__types_8h_1af9ee3597a0970d1df20492b765892a67" kindref="member">scl_security_t</ref><sp/><ref refid="structscl__event__msg_1a6d9c484262d9d2e9fceaa54a2e58b3c0" kindref="member">auth_type</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*security_key,<sp/>uint8_t<sp/>key_length);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1ga5843957613d407a2da20cdaa050027a3" kindref="member">scl_wifi_leave</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*scl_event_handler_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scl_event_header_t<sp/>*event_header,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*event_data,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handler_user_data);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="scl__common_8h_1aa58a3303ad0c17b7a2d32b4b3f390ec4" kindref="member">scl_result_t</ref><sp/><ref refid="group__wifi_1ga6e5f0a25829409bb98ec78b1ecffbb85" kindref="member">scl_management_set_event_handler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scl__types_8h_1aef70e7ecee07897e718f9471559e6504" kindref="member">scl_event_num_t</ref><sp/>*event_nums,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__wifi_1ga69d33b94e3ad497f7b8c1031bbe427c4" kindref="member">scl_event_handler_t</ref><sp/>handler_func,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handler_user_data,<sp/>uint16_t<sp/>*event_index);</highlight></codeline>
<codeline lineno="296"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wifi_1ga7b97db0a51d8c5d715d210e017a3cb88" kindref="member">scl_wifi_scan_callback</ref>(<ref refid="scl__types_8h_1a3936863aacd5c7f6573aa494ef322a1b" kindref="member">scl_scan_status_t</ref><sp/><ref refid="structscl__event__msg_1ade20423e91627f07e610924cb0081623" kindref="member">status</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifndef<sp/>INCLUDED_SCL_WIFI_API_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/sprint/scl_scl_mtb_integration_review/scl_doxygen_documentation/inc/scl_wifi_api.h"/>
  </compounddef>
</doxygen>
